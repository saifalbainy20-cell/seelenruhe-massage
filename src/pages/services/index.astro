---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { getTranslation } from '../../data/translations';
import servicesData from '../../content/services.json';
import { generateBreadcrumbSchema } from '../../lib/structured-data';

const lang = 'de';
const t = getTranslation(lang);

const breadcrumbData = generateBreadcrumbSchema([
  { name: t.nav.home, url: `${Astro.site}` },
  { name: t.nav.services, url: `${Astro.site}services` }
]);

// Define categories
const categories = [
  { id: 'beauty_massage', name: t.service_categories.beauty_massage },
  { id: 'therapeutic_massage', name: t.service_categories.therapeutic_massage },
  { id: 'beauty_therapy', name: t.service_categories.beauty_therapy },
  { id: 'regular_beauty', name: t.service_categories.regular_beauty }
];
---

<Layout 
  title={t.seo.services_title}
  description={t.seo.services_description}
  keywords={t.seo.home_keywords}
  lang={lang}
  structuredData={breadcrumbData}
>
  <Header lang={lang} currentPath="/services" />
  <main class="pt-24">
    <!-- Hero Section -->
    <section class="bg-gradient-to-r from-primary/10 to-accent/10 py-20">
      <div class="container mx-auto px-6 text-center">
        <h1 class="text-5xl md:text-6xl font-bold text-gray-800 mb-4">{t.services.title}</h1>
        <p class="text-xl text-gray-600 max-w-3xl mx-auto">{t.services.subtitle}</p>
      </div>
    </section>

    <!-- Category Navigation -->
    <section class="py-12 bg-white">
      <div class="container mx-auto px-6">
        <div class="flex flex-wrap justify-center gap-4" id="category-nav">
          {categories.map((category) => (
            <button
              data-category={category.id}
              class="category-button px-6 py-3 rounded-full text-lg font-medium transition-all duration-300 border-2 border-primary text-primary hover:bg-primary hover:text-white"
            >
              {category.name}
            </button>
          ))}
        </div>
      </div>
    </section>

    <!-- Services Grid -->
    <section class="py-12 bg-gray-50">
      <div class="container mx-auto px-6">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8" id="services-grid">
          {servicesData.map((service) => {
            const serviceTranslation = service.translations[lang];
            return (
              <div class="bg-white rounded-lg shadow-lg overflow-hidden transform transition-all duration-300 hover:scale-105 hover:shadow-xl" data-category={service.category}>
                <div class="relative h-64 overflow-hidden">
                  <img 
                    src={service.image} 
                    alt={serviceTranslation.name}
                    class="w-full h-full object-cover transition-transform duration-300 hover:scale-110"
                  />
                  <div class="absolute top-4 right-4 bg-primary text-white px-4 py-2 rounded-full font-medium">
                    {service.price}
                  </div>
                </div>
                <div class="p-6">
                  <h2 class="text-2xl font-bold text-gray-800 mb-2">{serviceTranslation.name}</h2>
                  <p class="text-gray-600 mb-4">{serviceTranslation.description}</p>
                  <div class="flex items-center justify-between">
                    <span class="text-accent font-medium flex items-center">
                      <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                      </svg>
                      {service.duration}
                    </span>
                    <a 
                      href={`/services/${service.id}`}
                      class="text-primary hover:text-accent transition-colors duration-300 font-medium flex items-center"
                    >
                      {t.services.learn_more}
                      <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                      </svg>
                    </a>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </section>

    <!-- CTA Section -->
    <section class="bg-primary py-16">
      <div class="container mx-auto px-6 text-center">
        <h2 class="text-3xl md:text-4xl font-bold text-white mb-6">
          {t.contact.book_now}
        </h2>
        <a 
          href="https://wa.me/+963937628368" 
          target="_blank"
          class="inline-block bg-white text-primary hover:bg-accent hover:text-white px-8 py-4 rounded-full text-lg font-medium transition-all duration-300 transform hover:scale-105"
        >
          {t.nav.book}
        </a>
      </div>
    </section>
  </main>
  <Footer lang={lang} />
</Layout>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const categoryButtons = document.querySelectorAll('.category-button');
    const serviceCards = document.querySelectorAll('#services-grid > div');

    // Initially show all services
    serviceCards.forEach(card => {
      card.style.display = 'block';
    });

    categoryButtons.forEach(button => {
      button.addEventListener('click', () => {
        const selectedCategory = button.dataset.category;

        // Remove active state from all buttons
        categoryButtons.forEach(btn => {
          btn.classList.remove('bg-primary', 'text-white');
          btn.classList.add('text-primary');
        });

        // Add active state to clicked button
        button.classList.add('bg-primary', 'text-white');
        button.classList.remove('text-primary');

        // Filter services
        serviceCards.forEach(card => {
          if (card.dataset.category === selectedCategory) {
            card.style.display = 'block';
          } else {
            card.style.display = 'none';
          }
        });
      });
    });
  });
</script>
