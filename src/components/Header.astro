---
import { getLocalizedPath, type Language } from '../lib/i18n';
import { getTranslation } from '../data/translations';
import LanguageSwitcher from './LanguageSwitcher';
import BookingButton from './BookingButton.astro';

export interface Props {
  lang: Language;
  currentPath: string;
}

const { lang, currentPath } = Astro.props;
const t = getTranslation(lang);
const isRTL = lang === 'ar';

// Helper function to get localized path

---

<header class="fixed top-0 left-0 right-0 z-50 bg-black/80 backdrop-blur-md shadow-lg transition-all duration-300">
  <nav class="container mx-auto px-6 py-4">
    <div class="flex items-center justify-between">
      <!-- Logo -->
      <a href={getLocalizedPath(lang,'/')} class="flex items-center">
        <img 
         src={isRTL ? "/images/logo_arabic.svg" : "/images/LOGO.svg"}         alt="Seelenruhe Logo" 
          class="h-12 w-auto transition-transform duration-300 hover:scale-105"
        />
        <span class="ml-3 text-white text-xl font-bold font-serif">Seelenruhe Massage</span>
      </a>

      <!-- Desktop Navigation - Centered -->
      <div class="hidden lg:flex items-center justify-center flex-1 mx-8">
        <ul class="flex items-center space-x-8">
          <li>
            <a 
              href={getLocalizedPath(lang,'/')}
              class={`text-white/90 hover:text-secondary transition-colors duration-300 font-medium ${currentPath === '' ? 'text-secondary' : ''}`}
            >
              {t.nav.home}
            </a>
          </li>
          <li>
            <a 
              href={getLocalizedPath(lang,'/services')}
              class={`text-white/90 hover:text-secondary transition-colors duration-300 font-medium ${currentPath.startsWith('/services') ? 'text-secondary' : ''}`}
            >
              {t.nav.services}
            </a>
          </li>
          <li>
            <a 
              href={getLocalizedPath(lang,'/#about')}
              class="text-white/90 hover:text-secondary transition-colors duration-300 font-medium nav-link"
              data-target="about"
            >
              {t.nav.about}
            </a>
          </li>
          <li>
            <a 
              href={getLocalizedPath(lang,'/#contact')}
              class="text-white/90 hover:text-secondary transition-colors duration-300 font-medium nav-link"
              data-target="contact"
            >
              {t.nav.contact}
            </a>
          </li>
        </ul>
      </div>

      <!-- Right Side: Language Switcher & Book Button -->
      <div class="flex items-center space-x-4">
        <!-- Language Switcher - Always Visible -->
        <LanguageSwitcher lang={lang} currentPath={currentPath} client:load />

        <!-- Book Button - Always Visible -->
        <BookingButton lang={lang} buttonClass="hidden md:inline-block" />

        <!-- Mobile Menu Button -->
        <button 
          id="mobile-menu-button"
          class="lg:hidden text-white/90 hover:text-secondary transition-colors duration-300"
          aria-label="Toggle mobile menu"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile Menu - Only Navigation Links -->
    <div id="mobile-menu" class="hidden lg:hidden mt-4 pb-4 border-t border-white/20 pt-4">
      <ul class="flex flex-col space-y-4">
        <li>
          <a 
            href={getLocalizedPath(lang,'/')}
            class={`block text-white/90 hover:text-secondary transition-colors duration-300 font-medium ${currentPath === '' ? 'text-secondary' : ''}`}
          >
            {t.nav.home}
          </a>
        </li>
        <li>
          <a 
            href={getLocalizedPath(lang,'/services')}
            class={`block text-white/90 hover:text-secondary transition-colors duration-300 font-medium ${currentPath.startsWith('/services') ? 'text-secondary' : ''}`}
          >
            {t.nav.services}
          </a>
        </li>
        <li>
          <a 
            href={getLocalizedPath(lang,'/#about')}
            class="block text-white/90 hover:text-secondary transition-colors duration-300 font-medium nav-link"
            data-target="about"
          >
            {t.nav.about}
          </a>
        </li>
        <li>
          <a 
            href={getLocalizedPath(lang,'/#contact')}
            class="block text-white/90 hover:text-secondary transition-colors duration-300 font-medium nav-link"
            data-target="contact"
          >
            {t.nav.contact}
          </a>
        </li>
        <!-- Book Button for Small Screens -->
        <li class="md:hidden">
          <BookingButton lang={lang} buttonClass="block w-full" dropdownClass="w-full" itemClass="text-center" />
        </li>
      </ul>
    </div>
  </nav>
</header>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');

    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener('click', () => {
        mobileMenu.classList.toggle('hidden');
      });
    }

    // Navigation highlighting and smooth scrolling functionality
    function highlightActiveNavigation() {
      const currentHash = window.location.hash;
      
      // Get all navigation links
      const navLinks = document.querySelectorAll('.nav-link');
      
      navLinks.forEach(link => {
        const target = link.getAttribute('data-target');
        
        if (target) {
          // Remove existing active classes
          link.classList.remove('text-secondary');
          link.classList.add('text-white/90');
          
          // Check if we're currently viewing this section
          if (currentHash === `#${target}`) {
            link.classList.remove('text-white/90');
            link.classList.add('text-secondary');
          } else {
            // Check if section is in viewport
            const targetElement = document.getElementById(target);
            if (targetElement && isElementInViewport(targetElement)) {
              link.classList.remove('text-white/90');
              link.classList.add('text-secondary');
            }
          }
        }
      });
    }
    
    // Function to check if element is in viewport
    function isElementInViewport(element) {
      const rect = element.getBoundingClientRect();
      const windowHeight = window.innerHeight || document.documentElement.clientHeight;
      
      // Consider element in viewport if it's at least 30% visible
      return (
        rect.top <= windowHeight * 0.7 &&
        rect.bottom >= windowHeight * 0.3
      );
    }
    
    // Smooth scrolling for anchor links
    const anchorLinks = document.querySelectorAll('a[href*="#"]');
    
    anchorLinks.forEach(link => {
      link.addEventListener('click', function(e) {
        const href = this.getAttribute('href');
        
        // Only handle internal anchor links
        if (href.includes('#') && (href.startsWith('#') || href.includes(window.location.pathname))) {
          const targetId = href.split('#')[1];
          const targetElement = document.getElementById(targetId);
          
          if (targetElement) {
            e.preventDefault();
            
            // Calculate offset for fixed header
            const headerHeight = document.querySelector('header')?.offsetHeight || 80;
            const targetPosition = targetElement.offsetTop - headerHeight;
            
            // Smooth scroll to target
            window.scrollTo({
              top: targetPosition,
              behavior: 'smooth'
            });
            
            // Update URL hash
            history.pushState(null, null, `#${targetId}`);
            
            // Highlight the active link
            setTimeout(highlightActiveNavigation, 100);
          }
        }
      });
    });
    
    // Initialize functionality
    highlightActiveNavigation();
    
    // Update highlighting on scroll
    let scrollTimeout;
    window.addEventListener('scroll', function() {
      clearTimeout(scrollTimeout);
      scrollTimeout = setTimeout(highlightActiveNavigation, 100);
    });
    
    // Update highlighting on hash change
    window.addEventListener('hashchange', highlightActiveNavigation);
  });
</script>
